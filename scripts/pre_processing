import urllib.request
import sys
import re
from pydub import AudioSegment
import cv2

def images():
	video_name = "name.mp4" # or any other extension like .avi etc
	vidcap = cv2.VideoCapture(video_name)
	success,image = vidcap.read()
	count = 0
	while success:
		cv2.imwrite("frame%d.jpg" % count, image)     # save frame as JPEG file      
		success,image = vidcap.read()
		print('Read a new frame: ', success)
		count += 1

#assuming order like this 
#captions timestamp 
#url 
#captions timestamps 
#url

def split(url, timestamps):

	
	audio = AudioSegment.from_wav(url)

	start = ""
	for  idx,t in enumerate(timestamps):
		#break loop if at last element of list
		if idx == len(timestamps):
			break

		end = t * 1000 #pydub works in millisec
		print ("split at [ {}:{}] ms".format(start, end))
		audio_chunk=audio[start:end]
		audio_chunk.export( "audio_chunk_{}.wav".format(end), format="wav")

		start = end * 1000 

def download(url):
	
	name=url+".mp4"
	try:
		print("Downloading starts...\n")
		urllib.request.urlretrieve(url, name)
		print("Download completed..!!")
	except Exception as e:
		print(e)


def removeemptylines():
	output=""
	with open("example.txt") as f:
		for line in f:
			if not line.isspace():
				output+=line
				
	f= open("example.txt","w")
	f.write(output)

removeemptylines()
file1 = open('example.txt', 'r')
Lines = file1.readlines()

count = 0
# Strips the newline character
for line in Lines:
	timestamps, url =""
	count += 1
	print("Line{}: {}".format(count, line.strip()))
	if(count%2==1):
		timestamps = re.findall(r'\b\d+\b',line)  #assuming 
		split()
		

	else:
		#download segmented audio from video 
		download(line, timestamps)
		images(line)

		
	




    
